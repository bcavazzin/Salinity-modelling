model {

  for (i in 1:n_dat) {
    intensity[lakeIDX[i], bac_id[i]] ~ dnorm(mu[i], tau)
    mu[i] = alpha[bac_id[i]] + beta[bac_id[i]]*log_salinity[lakeIDX[i]] + gamma[lakeIDX[i]] + 
    delta[lakeIDX[i]]*log_salinity[lakeIDX[i]]
  }

  # missingness model
  for (j in 1:n_lake) { 
    #log_salinity[j] ~ dnorm(mu.x, p.x)
    log_salinity[j] ~ dnorm(mu_s[j], p.x)
    mu_s[j] = beta_s*MAT[j] #+ beta_p*Summerp[j]
  }
  
  ## priors
  
  tau = 1/pow(sd.tau, 2)
  sd.tau ~ dunif(0, 0.5)
 
  for (i in 1:n_bac) {  
    alpha[i] ~ dnorm(mu_alpha, tau_alpha)
    beta[i] ~ dnorm(mu_beta, tau_beta)
  }
  
  for (i in 1:n_lake) {
  gamma[i] ~ dnorm(mu_gamma, tau_gamma)
  delta[i] ~ dnorm(mu_delta, tau_delta)
  
  }

  # random effects
  mu_alpha ~ dunif(-10,10) 
  mu_beta ~ dunif(-10,10) 
  mu_gamma ~ dunif(-10,10)
  mu_delta ~ dunif(-10,10)
  
  tau_alpha = 1/pow(sd_alpha, 2)
  sd_alpha ~ dunif(0, 10)
  tau_beta = 1/pow(sd_beta, 2)
  sd_beta ~ dunif(0, 10)
  tau_gamma = 1/pow(sd_gamma,2)
  sd_gamma ~ dunif(0,10)
  tau_delta = 1/pow(sd_delta,2)
  sd_delta ~ dunif(0,10)

  #mu.x ~ dunif(-2, 5) #to use with sal and intensity alone 
  p.x = 1/pow(sd.x, 2)
  beta_s ~ dnorm(0,0.001)
  #beta_p ~ dnorm(0,0.001)

  sd.x ~ dunif(0, 0.01)

  
  for (j in 1:n_lake_miss) { 
    log_missing[j] = log_salinity[n_lake_obs + j] 
    missing[j] = exp(log_missing)  
  }
  
  # posterior_prediction
  #pred_mean_lsalinity[] = (mu[] - mu_alpha)/mu_beta
  for (i in 1:n_dat) {
    #pred_mean_lsalinity[i] = (mu[i] - mu_alpha)/mu_beta
    #pred_lsalinity[i] = (mu[i] - alpha[bac_id[i]])/beta[bac_id[i]]
  
   intens_pred[i] ~ dnorm(mu[i], tau)
   ## mu[i] = alpha[bac_id[i]] + beta[bac_id[i]]*log_salinity[lakeIDX[i]]
  }
}
