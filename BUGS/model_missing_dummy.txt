# independent distributions on the slope and intercept, missing data model 

model {

  for (i in 1:n_dat) {
    intensity[lake_id[i], bac_id[i]] ~ dnorm(mu[i], tau) #tau[i]
    mu[i] = alpha[bac_id[i]] - beta[bac_id[i]]*log_salinity[lake_id[i]]
  }

  # missingness model
  for (j in 1:n_lake) { 
    log_salinity[j] ~ dnorm(mu.x, p.x)#T(-2.5, 7)
  }
  
  ## priors
  
  tau = 1/pow(sd.tau, 2)
  sd.tau ~ dunif(0, 50)
 
  for (i in 1:n_bac) {  
    alpha[i] ~ dnorm(mu_alpha, tau_alpha)
    beta[i] ~ dnorm(mu_beta, tau_beta)T(0,)
  }

  # random effects
  mu_alpha ~ dunif(0, 20)
  mu_beta ~ dunif(0.1, 2)
  
  tau_alpha = 1/pow(sd_alpha, 2)
  sd_alpha ~ dunif(0, 10)
  tau_beta = 1/pow(sd_beta, 2)
  sd_beta ~ dunif(0, 10)

  mu.x ~ dunif(-10, 10)
  p.x = 1/pow(sd.x, 2)
  sd.x ~ dunif(0.0001, 1)

  ## generated quantities
  
  m.missing = exp(mu.x + 0.5*(sd.x^2))
  
  for (j in 1:n_lake_miss) { 
    log_missing[j] = log_salinity[n_lake_obs + j] 
    missing[j] = exp(log_missing)  
  }
  
  # posterior_prediction
  
  for (i in 1:n_dat) {
    # pooled mean prediction
    pred_mean_lsalinity[i] = (mu[i] - mu_alpha)/mu_beta
    pred_mean_salinity[i] = exp(pred_mean_lsalinity[i])
   
    # bacteria-specific mean prediction
    pred_lsalinity[i] = (mu[i] - alpha[bac_id[i]])/beta[bac_id[i]]
    pred_salinity[i] = exp(pred_lsalinity[i])

    # bacteria-specific observed data prediction
    pred_intens_lsalinity[i] = (intensity[lake_id[i], bac_id[i]] - alpha[bac_id[i]])/beta[bac_id[i]]
    #pred_intens_salinity[i] = exp(pred_intens_lsalinity[i])
  }
}
